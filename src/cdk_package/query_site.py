{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "65d7aba9-1b41-4c2b-a349-7c47a2683fc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.2\" width=\"26.42mm\" height=\"22.38mm\" viewBox=\"0 0 26.42 22.38\">\n",
       "  <desc>Generated by the Chemistry Development Kit (http://github.com/cdk)</desc>\n",
       "  <g stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#000000\" stroke-width=\".3\" fill=\"#000000\">\n",
       "    <rect x=\".0\" y=\".0\" width=\"27.0\" height=\"23.0\" fill=\"#FFFFFF\" stroke=\"none\"/>\n",
       "    <g id=\"mol1\" class=\"mol\">\n",
       "      <line id=\"mol1bnd5\" class=\"bond\" x1=\"6.44\" y1=\"3.71\" x2=\"6.44\" y2=\"8.41\"/>\n",
       "      <g id=\"mol1bnd6\" class=\"bond\">\n",
       "        <line x1=\"6.44\" y1=\"8.41\" x2=\".77\" y2=\"11.71\"/>\n",
       "        <line x1=\"6.45\" y1=\"9.63\" x2=\"1.82\" y2=\"12.32\"/>\n",
       "      </g>\n",
       "      <line id=\"mol1bnd7\" class=\"bond\" x1=\".77\" y1=\"11.71\" x2=\".77\" y2=\"18.32\"/>\n",
       "      <g id=\"mol1bnd8\" class=\"bond\">\n",
       "        <line x1=\".77\" y1=\"18.32\" x2=\"6.44\" y2=\"21.62\"/>\n",
       "        <line x1=\"1.82\" y1=\"17.71\" x2=\"6.45\" y2=\"20.4\"/>\n",
       "      </g>\n",
       "      <line id=\"mol1bnd9\" class=\"bond\" x1=\"6.44\" y1=\"21.62\" x2=\"12.17\" y2=\"18.32\"/>\n",
       "      <g id=\"mol1bnd10\" class=\"bond\">\n",
       "        <line x1=\"12.17\" y1=\"18.32\" x2=\"12.17\" y2=\"11.71\"/>\n",
       "        <line x1=\"11.11\" y1=\"17.71\" x2=\"11.11\" y2=\"12.32\"/>\n",
       "      </g>\n",
       "      <line id=\"mol1bnd11\" class=\"bond\" x1=\"6.44\" y1=\"8.41\" x2=\"12.17\" y2=\"11.71\"/>\n",
       "      <line id=\"mol1bnd12\" class=\"bond\" x1=\"12.17\" y1=\"11.71\" x2=\"16.4\" y2=\"9.27\"/>\n",
       "      <g id=\"mol1atm4\" class=\"atom\">\n",
       "        <path d=\"M7.4 .79v.34q-.17 -.15 -.35 -.23q-.18 -.08 -.39 -.08q-.41 .0 -.63 .25q-.22 .25 -.22 .72q.0 .47 .22 .73q.22 .25 .63 .25q.21 .0 .39 -.08q.19 -.08 .35 -.23v.34q-.17 .12 -.36 .18q-.19 .06 -.4 .06q-.55 .0 -.86 -.33q-.31 -.34 -.31 -.91q.0 -.58 .31 -.91q.31 -.34 .86 -.34q.21 .0 .4 .06q.19 .06 .36 .17zM8.87 .82q-.36 .0 -.57 .26q-.21 .26 -.21 .72q.0 .45 .21 .72q.21 .26 .57 .26q.35 .0 .56 -.26q.21 -.26 .21 -.72q.0 -.45 -.21 -.72q-.21 -.26 -.56 -.26zM8.87 .56q.5 .0 .8 .34q.3 .34 .3 .91q.0 .57 -.3 .91q-.3 .34 -.8 .34q-.51 .0 -.81 -.34q-.3 -.34 -.3 -.91q.0 -.57 .3 -.91q.3 -.34 .81 -.34z\" stroke=\"none\"/>\n",
       "        <path d=\"M10.49 3.57h.68v.16h-.91v-.16q.11 -.11 .3 -.31q.19 -.19 .24 -.25q.09 -.1 .13 -.18q.04 -.07 .04 -.14q.0 -.12 -.08 -.19q-.08 -.07 -.21 -.07q-.09 .0 -.19 .03q-.1 .03 -.22 .1v-.2q.12 -.05 .22 -.07q.1 -.03 .19 -.03q.23 .0 .36 .11q.13 .11 .13 .3q.0 .09 -.03 .17q-.03 .08 -.12 .19q-.02 .03 -.15 .16q-.13 .13 -.36 .37z\" stroke=\"none\"/>\n",
       "        <path d=\"M11.44 .6h1.51v.28h-1.19v.71h1.14v.27h-1.14v.87h1.22v.27h-1.54v-2.4zM13.8 .69v.51h.61v.23h-.61v.98q.0 .22 .06 .28q.06 .06 .25 .06h.3v.25h-.3q-.34 .0 -.47 -.13q-.13 -.13 -.13 -.47v-.98h-.22v-.23h.22v-.51h.3z\" stroke=\"none\"/>\n",
       "      </g>\n",
       "      <g id=\"mol1atm12\" class=\"atom\">\n",
       "        <path d=\"M18.85 7.39v.34q-.17 -.15 -.35 -.23q-.18 -.08 -.39 -.08q-.41 .0 -.63 .25q-.22 .25 -.22 .72q.0 .47 .22 .73q.22 .25 .63 .25q.21 .0 .39 -.08q.19 -.08 .35 -.23v.34q-.17 .12 -.36 .18q-.19 .06 -.4 .06q-.55 .0 -.86 -.33q-.31 -.34 -.31 -.91q.0 -.58 .31 -.91q.31 -.34 .86 -.34q.21 .0 .4 .06q.19 .06 .36 .17zM20.33 7.43q-.36 .0 -.57 .26q-.21 .26 -.21 .72q.0 .45 .21 .72q.21 .26 .57 .26q.35 .0 .56 -.26q.21 -.26 .21 -.72q.0 -.45 -.21 -.72q-.21 -.26 -.56 -.26zM20.33 7.16q.5 .0 .8 .34q.3 .34 .3 .91q.0 .57 -.3 .91q-.3 .34 -.8 .34q-.51 .0 -.81 -.34q-.3 -.34 -.3 -.91q.0 -.57 .3 -.91q.3 -.34 .81 -.34z\" stroke=\"none\"/>\n",
       "        <path d=\"M21.94 10.18h.68v.16h-.91v-.16q.11 -.11 .3 -.31q.19 -.19 .24 -.25q.09 -.1 .13 -.18q.04 -.07 .04 -.14q.0 -.12 -.08 -.19q-.08 -.07 -.21 -.07q-.09 .0 -.19 .03q-.1 .03 -.22 .1v-.2q.12 -.05 .22 -.07q.1 -.03 .19 -.03q.23 .0 .36 .11q.13 .11 .13 .3q.0 .09 -.03 .17q-.03 .08 -.12 .19q-.02 .03 -.15 .16q-.13 .13 -.36 .37z\" stroke=\"none\"/>\n",
       "        <path d=\"M22.9 7.21h1.51v.28h-1.19v.71h1.14v.27h-1.14v.87h1.22v.27h-1.54v-2.4zM25.25 7.3v.51h.61v.23h-.61v.98q.0 .22 .06 .28q.06 .06 .25 .06h.3v.25h-.3q-.34 .0 -.47 -.13q-.13 -.13 -.13 -.47v-.98h-.22v-.23h.22v-.51h.3z\" stroke=\"none\"/>\n",
       "      </g>\n",
       "    </g>\n",
       "  </g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import requests\n",
    "import urllib.parse\n",
    "from IPython.display import SVG, display\n",
    "\n",
    "CDKDEPICTLINK = 'https://www.simolecule.com/cdkdepict/depict/bow'\n",
    "\n",
    "\n",
    "def smiles_depict_url(smiles: str, format: str = 'svg') -> str:\n",
    "    \"\"\"\n",
    "    Generate the URL for the depiction of a SMILES string.\n",
    "    Args:\n",
    "        smiles: smiles string to depict\n",
    "        format: 'svg', 'pdf', 'png', etc.\n",
    "    Returns:\n",
    "        URL string\n",
    "    \"\"\"\n",
    "   \n",
    "    \"\"\"\n",
    "    Complete the params dictionary and encode it into a URL string with the urllib.parse.urlencode function\n",
    "    Remember it must be a valid link to a cdkdepict URL, you can test your URL's by just navigating to the link in your browser\n",
    "    Return the URL string\n",
    "    \"\"\"\n",
    "    rendering_service = CDKDEPICTLINK\n",
    "    params = {\n",
    "        'smi': smiles,\n",
    "        'abbr' : 'on',\n",
    "        'hdisp': ' bridgehead ',\n",
    "        'zoom' : '1.3',\n",
    "        'annotate' : 'none',\n",
    "        'r': '0',\n",
    "        'w': '-1',\n",
    "        'h': '-1'\n",
    "        # Your code here\n",
    "        \n",
    "    }\n",
    "    params_str = urllib.parse.urlencode(params)\n",
    "    return f'{rendering_service}/{format}?{params_str}'\n",
    "\n",
    "    # Your code here\n",
    "\n",
    "def display_svg(url: str) -> None:\n",
    "     response = requests.get(url)\n",
    "     if response.status_code == 200:\n",
    "        svg_data = response.text\n",
    "        display(SVG(svg_data))\n",
    "     else:\n",
    "        print(\"Failed to retrieve SVG: Status code\", response.status_code)\n",
    "    # post a request to the link you construct. Remember to handle the cases where the response does not work as intented\n",
    "    #Â Look at the response content to find the SVG data.\n",
    "\n",
    "    # Use the display function to display the SVG data\n",
    "\n",
    "\n",
    "smiles = 'CCOC(=O)C1=CC=CC=C1C(=O)OCC' \n",
    "url = smiles_depict_url(smiles)\n",
    "display_svg(url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "904cb140-87d5-4626-99e5-dc5f4da8ed62",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
